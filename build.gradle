plugins {
    id 'java'
    id "io.qameta.allure" version "2.8.1"
}

group 'demo.ekam'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://palantir.bintray.com/releases" }
}

dependencies {
    // ekam
    implementation('com.testvagrant.ekam:ekam:0.1.4-beta')
    implementation('com.testvagrant.ekam:ekam-api:0.0.2-alpha')
    implementation('com.testvagrant.ekam:ekam-config:0.0.5-beta')
    implementation('com.testvagrant.ekam:ekam-commons:0.0.6-beta')
    implementation('com.testvagrant.ekam:ekam-atoms:0.0.2-alpha')

    // appium
    implementation('io.appium:java-client:7.5.1')

    //AssertJ
    implementation 'org.assertj:assertj-core:3.19.0'

    // selenium
    implementation('org.seleniumhq.selenium:selenium-java:3.141.59')

    // google
    implementation('com.google.guava:guava:28.0-jre')
    implementation('com.google.inject:guice:5.0.1')

    // Test frameworks
    testImplementation('org.testng:testng:6.14.3')
    testImplementation('io.cucumber:cucumber-java:4.8.1')
    testImplementation('io.cucumber:cucumber-testng:4.8.1')

    // square
    implementation('com.squareup.retrofit2:retrofit:2.9.0')
    implementation('com.squareup.retrofit2:converter-gson:2.9.0')
    implementation('com.squareup.okhttp3:logging-interceptor:3.8.0')

    //lombok
    implementation('org.projectlombok:lombok:1.18.12')
    annotationProcessor('org.projectlombok:lombok:1.18.12')
    testImplementation('org.projectlombok:lombok:1.18.12')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.12')

    // jdbi
    implementation('org.jdbi:jdbi:2.78')

    implementation('org.awaitility:awaitility:4.0.3')
}

tasks.withType(Test) {
    systemProperties = [
        config         :  System.getProperty("config")
    ]
}

task runWebTests(type: Test) {
    filter {
        excludeTestsMatching "*.mobile.*"
        excludeTestsMatching "*.api.*"
        excludeTestsMatching "*.db.*"
    }
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "2"))
        includeGroups System.getProperty("tags", "web")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runWebTestsOnCloud(type: Test) {
    systemProperties = [
            config         :  "web.remote"
    ]
    filter {
        excludeTestsMatching "*.mobile.*"
        excludeTestsMatching "*.api.*"
        excludeTestsMatching "*.db.*"
    }
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "2"))
        includeGroups System.getProperty("tags", "web")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runMobileTestsOnCloud(type: Test) {
    filter {
        excludeTestsMatching "*.web.*"
        excludeTestsMatching "*.api.*"
        excludeTestsMatching "*.db.*"
    }
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "4"))
        includeGroups System.getProperty("tags", "mobile")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runApiTests(type: Test) {
    filter {
        excludeTestsMatching "*.web.*"
        excludeTestsMatching "*.mobile.*"
        excludeTestsMatching "*.db.*"
    }
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "4"))
        includeGroups System.getProperty("tags", "api")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runDbTests(type: Test) {
    filter {
        excludeTestsMatching "*.web.*"
        excludeTestsMatching "*.mobile.*"
        excludeTestsMatching "*.api.*"
    }
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "4"))
        includeGroups System.getProperty("tags", "db")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}



allure {
    version = '2.8.1'
    autoconfigure = true
    aspectjweaver = true
    allureJavaVersion = '2.10.0'
    reportDir = new File(project.projectDir as File, '/allure-report/ui')
    resultsDir = new File(project.projectDir as File, '/allure-report/results')
    clean = true
}


task createReportDir() {
    doLast {
        def file = new File(project.projectDir as File, '/allure-report/ui')
        if (!file.exists()) {
            file.mkdirs();
        }
    }
}

task saveHistory(type: Copy) {
    from new File(project.projectDir as File, '/allure-report/ui/history')
    into new File(project.projectDir as File, '/allure-report/results/history')
}


clean {
    if (!System.getenv('CI')) {
        delete "$projectDir/allure-report"
        delete "$projectDir/allure-results"
    }
}

// Execution Rules
tasks.runWebTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.runWebTestsOnCloud.dependsOn 'clean', 'build', 'createReportDir'
tasks.runMobileTestsOnCloud.dependsOn 'clean', 'build', 'createReportDir'
tasks.runApiTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.build.mustRunAfter 'clean'
tasks.runWebTests.finalizedBy('allureReport')
tasks.runWebTestsOnCloud.finalizedBy('allureReport')
tasks.runMobileTestsOnCloud.finalizedBy('allureReport')
tasks.runApiTests.finalizedBy('allureReport')
