plugins {
    id 'java'
    id "io.qameta.allure" version "2.8.1"
}

group 'demo.ekam'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
    maven { url "http://palantir.bintray.com/releases" }
}

dependencies {
    // ekam
    implementation('com.testvagrant.ekam:ekam:0.0.1-demo')
    implementation('io.appium:java-client:7.5.1')
    implementation('com.testvagrant.ekam:ekam-api:0.0.2-alpha')


    //AssertJ
    implementation 'org.assertj:assertj-core:3.19.0'

    // selenium
    implementation('org.seleniumhq.selenium:selenium-java:3.141.59')

    // google
    implementation('com.google.guava:guava:28.0-jre')
    implementation('com.google.inject:guice:4.2.3')

    // Test frameworks
    testImplementation('org.testng:testng:6.14.3')
    testImplementation('io.cucumber:cucumber-java:4.8.1')
    testImplementation('io.cucumber:cucumber-testng:4.8.1')

    // square
    implementation('com.squareup.retrofit2:retrofit:2.9.0')
    implementation('com.squareup.retrofit2:converter-gson:2.9.0')
    implementation('com.squareup.okhttp3:logging-interceptor:3.8.0')

    //lombok
    implementation('org.projectlombok:lombok:1.18.12')
    annotationProcessor('org.projectlombok:lombok:1.18.12')
    testImplementation('org.projectlombok:lombok:1.18.12')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.12')

    // jdbi
    implementation('org.jdbi:jdbi:2.78')

    implementation('org.awaitility:awaitility:4.0.3')
}


tasks.withType(Test) {
    systemProperties = [
            env                   : System.getProperty('env'),

            tags                  : System.getProperty('tags', 'smoke'),
            logs                  : System.getProperty('logs', 'false'),
            timeline              : System.getProperty('timeline', 'true'),

            browser               : System.getProperty('browser', 'chrome'),
            headless              : System.getProperty('headless', 'false'),

            //mobile
            mobileFeed            : System.getProperty('mobileFeed', 'mobileTestFeed'),
            hub                   : System.getProperty('hub', 'browserstack'),
            target                : System.getProperty('target', 'android'),
            runMode               : System.getProperty('runMode', 'local'),

            //web
            webFeed               : System.getProperty('webFeed','webTestFeed'),

            //Report
            ekamServerUrl         : System.getProperty('ekamServerUrl', 'http://35.154.106.80:8090/'),
            publishToDashboard    : System.getProperty('publishToDashboard', 'true'), // Enable only when Dashboard is up and running
            slackNotif            : System.getProperty('slackNotif', 'false'), //Global => On Failures
            slackNotifyMeEverytime: System.getProperty('slackNotifyMeEverytime', 'false'),

            //execution
            sessions              : System.getProperty("sessions", "1")
    ]
}

task runWebTests(type: Test) {
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "1"))
        includeGroups System.getProperty("tags", "web")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runMobileEmulationTests(type: Test) {
    outputs.upToDateWhen { false }
    systemProperties = [
            env                   : System.getProperty('env'),
            tags                  : System.getProperty('tags', 'web'),
            logs                  : System.getProperty('logs', 'false'),
            timeline              : System.getProperty('timeline', 'true'),
            target                : System.getProperty('target', 'responsive'),

            browser               : System.getProperty('browser', 'chrome'),
            headless              : System.getProperty('headless', 'false'),
            webFeed               : System.getProperty('webFeed', 'mobileEmulationTestFeed'),

            //Report
            ekamServerUrl         : System.getProperty('ekamServerUrl', 'http://34.66.233.63/'),
            publishToDashboard    : System.getProperty('publishToDashboard', 'false'), // Enable only when Dashboard is up and running
            slackNotif            : System.getProperty('slackNotif', 'false'), //Global => On Failures
            slackNotifyMeEverytime: System.getProperty('slackNotifyMeEverytime', 'false'),

            //execution
            sessions              : System.getProperty("sessions", "1")
    ]
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "1"))
        includeGroups System.getProperty("tags", "web")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runMobileTests(type: Test) {
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "1"))
        includeGroups System.getProperty("tags", "mobile")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}


task runMobileTestsOnCloud(type: Test) {
    systemProperties = [
            env                   : System.getProperty('env'),

            tags                  : System.getProperty('tags', 'smoke'),
            logs                  : System.getProperty('logs', 'false'),
            timeline              : System.getProperty('timeline', 'true'),

            //mobile
            mobileFeed            : System.getProperty('mobileFeed', 'mobileTestFeedRemote'),
            hub                   : System.getProperty('hub', 'browserstack'),
            target                : System.getProperty('target', 'android'),
            runMode               : System.getProperty('runMode', 'remote'),

            //Report
            ekamServerUrl         : System.getProperty('ekamServerUrl', 'http://35.154.106.80:8090/'),
            publishToDashboard    : System.getProperty('publishToDashboard', 'true'), // Enable only when Dashboard is up and running
            slackNotif            : System.getProperty('slackNotif', 'false'), //Global => On Failures
            slackNotifyMeEverytime: System.getProperty('slackNotifyMeEverytime', 'false'),

            //execution
            sessions              : System.getProperty("sessions", "4")
    ]
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "4"))
        includeGroups System.getProperty("tags", "mobile")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runIOSTestsOnCloud(type: Test) {
    systemProperties = [
            env                   : System.getProperty('env'),

            tags                  : System.getProperty('tags', 'smoke'),
            logs                  : System.getProperty('logs', 'false'),
            timeline              : System.getProperty('timeline', 'true'),

            //mobile
            mobileFeed            : System.getProperty('mobileFeed', 'mobileTestFeedRemote'),
            hub                   : System.getProperty('hub', 'browserstack'),
            target                : System.getProperty('target', 'iOS'),
            runMode               : System.getProperty('runMode', 'remote'),

            //Report
            ekamServerUrl         : System.getProperty('ekamServerUrl', 'http://35.154.106.80:8090/'),
            publishToDashboard    : System.getProperty('publishToDashboard', 'true'), // Enable only when Dashboard is up and running
            slackNotif            : System.getProperty('slackNotif', 'false'), //Global => On Failures
            slackNotifyMeEverytime: System.getProperty('slackNotifyMeEverytime', 'false'),

            //execution
            sessions              : System.getProperty("sessions", "4")
    ]
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount Integer.parseInt(System.getProperty("sessions", "4"))
        includeGroups System.getProperty("tags", "mobile")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

task runApiTests(type: Test) {
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount = Integer.parseInt(System.getProperty("sessions", "2"))
        includeGroups System.getProperty("tags", "api")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        listeners << 'com.testvagrant.ekam.api.listeners.ApiListener'
        listeners << 'com.testvagrant.ekam.integrations.slack.SlackListener'
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}


task runDBTests(type: Test) {
    outputs.upToDateWhen { false }
    useTestNG {
        parallel = "methods"
        threadCount = Integer.parseInt(System.getProperty("sessions", "1"))
        includeGroups System.getProperty("tags", "db")
        testLogging.showStandardStreams = true
        useDefaultListeners true
        outputDirectory = file("$buildDir/" + System.getProperty('tags', 'NONE'))
    }
}

allure {
    version = '2.8.1'
    autoconfigure = true
    aspectjweaver = true
    allureJavaVersion = '2.10.0'
    reportDir = new File(project.projectDir as File, '/allure-report/ui')
    resultsDir = new File(project.projectDir as File, '/allure-report/results')
    clean = true
}


task createReportDir() {
    doLast {
        def file = new File(project.projectDir as File, '/allure-report/ui')
        if (!file.exists()) {
            file.mkdirs();
        }
    }
}

task saveHistory(type: Copy) {
    from new File(project.projectDir as File, '/allure-report/ui/history')
    into new File(project.projectDir as File, '/allure-report/results/history')
}


clean {
    if (!System.getenv('CI')) {
        delete "$projectDir/allure-report"
    }
}

// Execution Rules
tasks.runWebTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.runMobileTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.runMobileTestsOnCloud.dependsOn 'clean', 'build', 'createReportDir'
tasks.runIOSTestsOnCloud.dependsOn 'clean', 'build', 'createReportDir'
tasks.runMobileEmulationTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.runApiTests.dependsOn 'clean', 'build', 'createReportDir'
tasks.build.mustRunAfter 'clean'
tasks.runWebTests.finalizedBy('allureReport')
tasks.runMobileTests.finalizedBy('allureReport')
tasks.runMobileTestsOnCloud.finalizedBy('allureReport')
tasks.runIOSTestsOnCloud.finalizedBy('allureReport')
tasks.runMobileEmulationTests.finalizedBy('allureReport')
tasks.runApiTests.finalizedBy('allureReport')
